// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"time"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (
  id, 
  sender_id, 
  recipient_id,
  amount
) VALUES ($1, $2, $3, $4)
`

type CreateTransactionParams struct {
	ID          string
	SenderID    string
	RecipientID string
	Amount      string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createTransaction,
		arg.ID,
		arg.SenderID,
		arg.RecipientID,
		arg.Amount,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, email, name, password) VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	ID       string
	Email    string
	Name     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.Password,
	)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, email, name, password FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Name,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByUserId = `-- name: GetTransactionsByUserId :many
SELECT 
	transactions.id,
  amount,
  created_at,
  updated_at,
	sender.id AS sender_id,
	sender.name AS sender_name,
	sender.email AS sender_email,
	recipient.id AS recipient_id,
  recipient.name AS recipient_name,
  recipient.email AS recipient_email 
FROM transactions 
JOIN users sender ON sender_id = sender.id 
JOIN  users recipient ON recipient_id = recipient.id
WHERE sender_id = $1 OR recipient_id = $1 ORDER BY created_at DESC
`

type GetTransactionsByUserIdRow struct {
	ID             string
	Amount         string
	CreatedAt      time.Time
	UpdatedAt      time.Time
	SenderID       string
	SenderName     string
	SenderEmail    string
	RecipientID    string
	RecipientName  string
	RecipientEmail string
}

func (q *Queries) GetTransactionsByUserId(ctx context.Context, senderID string) ([]GetTransactionsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByUserId, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionsByUserIdRow
	for rows.Next() {
		var i GetTransactionsByUserIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.SenderID,
			&i.SenderName,
			&i.SenderEmail,
			&i.RecipientID,
			&i.RecipientName,
			&i.RecipientEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, name, password from users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, name, password from users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, email, name, password from users WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.Password,
	)
	return i, err
}
